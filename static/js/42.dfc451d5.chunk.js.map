{"version":3,"file":"static/js/42.dfc451d5.chunk.js","mappings":"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","sources":["webpack://social-network/./src/Components/CommonComponents/ErrorMessage/ErrorMessage.module.css?967a","Components/CommonComponents/ErrorMessage/ErrorMessage.tsx","Components/CommonComponents/FieldCreators/FieldCreators.tsx","webpack://social-network/./src/Components/CommonComponents/ValidatedComponents/ValidateInput/ValidateInput.module.css?e24d","Components/CommonComponents/ValidatedComponents/ValidateInput/ValidateInput.tsx","Components/Login/LoginForm/LoginForm.tsx","Components/Login/LogoutForm/LogoutForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Utills/Validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"ErrorMessage_errorMessage__E3reh\",\"formSummaryError\":\"ErrorMessage_formSummaryError__Vh-aa\"};","import styleClass from \"./ErrorMessage.module.css\"\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    error: string\r\n}\r\nconst ErrorMessage: React.FC<PropsType> = ({error}) => {\r\n    return (\r\n        <span>\r\n            {\r\n                // Если есть свойство props.error вывести этот блок\r\n                error &&\r\n                <div className={styleClass.formSummaryError}>\r\n                    <p>{error}</p>\r\n                </div>\r\n            }\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import {Field} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../Utills/Validators/validators\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {StringKey, ValidatorComponentType} from \"../../../Types/Types\";\r\nimport {FieldTypes, InputFieldTypes} from \"../../../Types/FormsTypes\";\r\n\r\nexport type OptionalAttributesType = {\r\n    label?: string,\r\n    placeholder?: string,\r\n    onChange?: (element: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nfunction TypedInputField<T>(\r\n    name: StringKey<T>,\r\n    type: InputFieldTypes,\r\n    component: React.FC<ValidatorComponentType> | FieldTypes,\r\n    validators: Array<FieldValidatorType>,\r\n    specialAttributes?: OptionalAttributesType\r\n): React.ReactElement {\r\n\r\n    const onChangeFunction = (element: ChangeEvent<HTMLInputElement>) => {\r\n        if (specialAttributes?.onChange) {\r\n            specialAttributes?.onChange(element);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {specialAttributes?.label && <label htmlFor={name}>{specialAttributes?.label}</label>}\r\n            <Field name={name} type={type} component={component}\r\n                   validate={validators}\r\n                   placeholder={specialAttributes?.placeholder}\r\n                   onChange={onChangeFunction}/>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default TypedInputField;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"ValidateInput_formControl__mmMtO\",\"error\":\"ValidateInput_error__TNFKJ\"};","import styleClass from \"./ValidateInput.module.css\"\r\nimport classNames from \"classnames\"\r\nimport React from \"react\";\r\nimport {ValidatorComponentType} from \"../../../../Types/Types\";\r\n\r\nconst ValidatedInput: React.FC<ValidatorComponentType> = ({input, meta, ...props}) => {\r\n    let isValidationFailed = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={classNames(styleClass.formControl, {[styleClass.error]: isValidationFailed})}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {isValidationFailed && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ValidatedInput;","import styleClass from \"./LoginForm.module.css\"\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport ValidatedInput from \"../../CommonComponents/ValidatedComponents/ValidateInput/ValidateInput\";\r\nimport {requiredField} from \"../../../Utills/Validators/validators\";\r\nimport ErrorMessage from \"../../CommonComponents/ErrorMessage/ErrorMessage\";\r\nimport {LoginFormValuesType} from \"../../../Types/FormsTypes\";\r\nimport React from \"react\";\r\nimport TypedInputField from \"../../CommonComponents/FieldCreators/FieldCreators\";\r\n\r\ntype PropsType = {}\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            {TypedInputField<LoginFormValuesType>(\"username\",  \"text\", ValidatedInput, [requiredField],{label:\"Имя пользователя: \"})}\r\n            <div>\r\n                <label htmlFor=\"password\">Пароль: </label>\r\n                <Field id=\"password\" name=\"password\" type=\"password\" component={ValidatedInput}\r\n                       validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"rememberMe\">Запомнить меня: </label>\r\n                <Field id=\"rememberMe\" name=\"rememberMe\" type=\"checkbox\" component={'input'}/>\r\n            </div>\r\n            <ErrorMessage error={props.error}/>\r\n            <div>\r\n                <button id=\"loginButton\" name=\"loginButton\">Log in</button>\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default reduxForm<LoginFormValuesType, PropsType>({\r\n    form: 'login'\r\n})(LoginForm);","import {Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    username: string | null,\r\n    email: string | null\r\n};\r\n\r\nconst LogoutForm: React.FC<InjectedFormProps<{}, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            <h1>Вы вошли в систему</h1>\r\n            <p>Имя пользователя: {props.username}</p>\r\n            <p>Email: {props.email}</p>\r\n            <div>\r\n                <button id=\"logoutButton\" name=\"logoutButton\">Log out</button>\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default reduxForm<{}, PropsType>({form: 'logout'})(LogoutForm);","import styleClass from \"./Login.module.css\"\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport LogoutForm from \"./LogoutForm/LogoutForm\";\r\nimport React from \"react\";\r\nimport {LoginFormValuesType} from \"../../Types/FormsTypes\";\r\n\r\ntype PropsType = {\r\n    authExceptionMessage: string,\r\n    isAuth: boolean,\r\n    username: string | null,\r\n    email: string | null,\r\n    login: (username: string, password: string, rememberMe: boolean) => void,\r\n    logout: () => void\r\n}\r\n\r\n\r\nconst Login: React.FC<PropsType> = (props) => {\r\n    const handleLoginFormSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.username, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.isAuth\r\n                    ? <LogoutForm username={props.username} email={props.email}\r\n                                  onSubmit={props.logout}/>\r\n\r\n                    : <div>\r\n                        <h1>Логин</h1>\r\n                        <LoginForm {...props} onSubmit={handleLoginFormSubmit}/>\r\n                    </div>\r\n\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import Login from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login, logout} from \"../../Redux/Reducers/AurhReducer\";\r\nimport {\r\n    getAuthExceptionMessage,\r\n    getAuthUsersEmail,\r\n    getAuthUsersUsername,\r\n    getIsAuth\r\n} from \"../../Redux/Selectors/AuthSelectors\";\r\nimport React from \"react\";\r\nimport {ThunkDispatcher} from \"../../Types/Types\";\r\n\r\n\r\ntype PropsType = {};\r\nconst LoginContainer: React.FC<PropsType> = (props) => {\r\n\r\n    const authExceptionMessage = useSelector(getAuthExceptionMessage);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const username = useSelector(getAuthUsersUsername);\r\n    const email = useSelector(getAuthUsersEmail);\r\n\r\n    const dispatch=useDispatch<ThunkDispatcher>();\r\n\r\n    const loginRequest = (username: string, password: string, rememberMe: boolean) => {\r\n        dispatch(login(username, password, rememberMe));\r\n    }\r\n\r\n    const logoutRequest = () => {\r\n        dispatch(logout);\r\n    }\r\n\r\n    return (\r\n        <Login authExceptionMessage={authExceptionMessage} isAuth={isAuth} username={username} email={email}\r\n               login={loginRequest} logout={logoutRequest}/>\r\n    );\r\n}\r\n\r\nexport default React.memo(LoginContainer) as React.ComponentType;","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n\r\n    return \"Обязательное поле\";\r\n}\r\n\r\nexport const maxLength = (maxLength: number): FieldValidatorType => {\r\n    return (value) => {\r\n        if (value && value.length > maxLength) {\r\n            return `Максимальная длинна ${maxLength} символов`;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}"],"names":["_ref","error","_jsx","children","className","styleClass","name","type","component","validators","specialAttributes","_jsxs","label","htmlFor","Field","validate","placeholder","onChange","element","input","meta","props","_objectWithoutProperties","_excluded","isValidationFailed","touched","classNames","_defineProperty","_objectSpread","reduxForm","form","Form","onSubmit","handleSubmit","TypedInputField","ValidatedInput","requiredField","id","ErrorMessage","username","email","isAuth","LogoutForm","logout","LoginForm","formData","login","password","rememberMe","LoginContainer","authExceptionMessage","useSelector","getAuthExceptionMessage","getIsAuth","getAuthUsersUsername","getAuthUsersEmail","dispatch","useDispatch","Login","React","value","maxLength","length","concat"],"sourceRoot":""}