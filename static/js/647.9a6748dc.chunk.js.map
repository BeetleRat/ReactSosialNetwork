{"version":3,"file":"static/js/647.9a6748dc.chunk.js","mappings":"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","sources":["Components/CommonComponents/FieldCreators/FieldCreators.tsx","webpack://social-network/./src/Components/CommonComponents/ValidatedComponents/ValidatedTexarea/ValidatedTextarea.module.css?5dff","Components/CommonComponents/ValidatedComponents/ValidatedTexarea/ValidatedTextarea.tsx","Components/Dialog/Dialog.module.css","Components/Dialog/UserName/UserName.module.css","Components/Dialog/UserName/UserName.tsx","Components/Dialog/Message/Message.module.css","Components/Dialog/Message/Message.tsx","Components/Dialog/DialogForm/DialogForm.tsx","Components/Dialog/Dialog.tsx","Redux/Selectors/DialogSelectors.ts","Components/Dialog/DialogContainer.tsx","HOC/WithAuthRedirect.tsx","Utills/Validators/validators.ts"],"sourcesContent":["import {Field} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../Utills/Validators/validators\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {StringKey, ValidatorComponentType} from \"../../../Types/Types\";\r\nimport {FieldTypes, InputFieldTypes} from \"../../../Types/FormsTypes\";\r\n\r\nexport type OptionalAttributesType = {\r\n    label?: string,\r\n    placeholder?: string,\r\n    onChange?: (element: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nfunction TypedInputField<T>(\r\n    name: StringKey<T>,\r\n    type: InputFieldTypes,\r\n    component: React.FC<ValidatorComponentType> | FieldTypes,\r\n    validators: Array<FieldValidatorType>,\r\n    specialAttributes?: OptionalAttributesType\r\n): React.ReactElement {\r\n\r\n    const onChangeFunction = (element: ChangeEvent<HTMLInputElement>) => {\r\n        if (specialAttributes?.onChange) {\r\n            specialAttributes?.onChange(element);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {specialAttributes?.label && <label htmlFor={name}>{specialAttributes?.label}</label>}\r\n            <Field name={name} type={type} component={component}\r\n                   validate={validators}\r\n                   placeholder={specialAttributes?.placeholder}\r\n                   onChange={onChangeFunction}/>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default TypedInputField;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"ValidatedTextarea_formControl__pjV-W\",\"error\":\"ValidatedTextarea_error__QfE5k\"};","import styleClass from \"./ValidatedTextarea.module.css\"\r\nimport classNames from \"classnames\"\r\nimport React from \"react\";\r\nimport {ValidatorComponentType} from \"../../../../Types/Types\";\r\n\r\nconst ValidatedTextarea: React.FC<ValidatorComponentType> = ({input, meta, ...props}) => {\r\n    let isValidationFailed = meta.touched && meta.error;\r\n    return (\r\n        <div className={classNames(styleClass.formControl, {[styleClass.error]: isValidationFailed})}>\r\n            <div>\r\n                <textarea  {...input} {...props}/>\r\n            </div>\r\n            {isValidationFailed && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ValidatedTextarea;","// extracted by mini-css-extract-plugin\nexport default {\"dialogsStyle\":\"Dialog_dialogsStyle__kF5TS\",\"userNameStyle\":\"Dialog_userNameStyle__fFhWq\",\"messagesStyle\":\"Dialog_messagesStyle__LBE0K\"};","// extracted by mini-css-extract-plugin\nexport default {\"userNameStyle\":\"UserName_userNameStyle__Z+IZC\"};","import styleClass from \"./UserName.module.css\"\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n}\r\n\r\nconst UserName:React.FC<PropsType> = ({name}) =>{\r\n    return(\r\n        <div className={styleClass.userNameStyle}>\r\n            {name}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserName;","// extracted by mini-css-extract-plugin\nexport default {\"messageStyle\":\"Message_messageStyle__1qzaw\"};","import styleClass from \"./Message.module.css\"\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    text: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = ({text}) => {\r\n    return (\r\n        <div className={styleClass.messageStyle}>\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import {Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport ValidatedTextarea from \"../../CommonComponents/ValidatedComponents/ValidatedTexarea/ValidatedTextarea\";\r\nimport {maxLength, requiredField} from \"../../../Utills/Validators/validators\";\r\nimport TypedInputField from \"../../CommonComponents/FieldCreators/FieldCreators\";\r\nimport {DialogFormValuesType} from \"../../../Types/FormsTypes\";\r\nimport React from \"react\";\r\n\r\nlet maxLength15 = maxLength(15);\r\n\r\ntype PropsType = {}\r\n\r\nconst DialogForm: React.FC<InjectedFormProps<DialogFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            {TypedInputField<DialogFormValuesType>(\"newDialogMessage\", \"text\", ValidatedTextarea, [requiredField, maxLength15],{placeholder:\"Ответ\"})}\r\n            <div>\r\n                <button id=\"addNewMessage\" name=\"addNewMessage\">Ответить</button>\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default reduxForm<DialogFormValuesType, PropsType>({form: 'dialog'})(DialogForm)\r\n","// Подключение класса стиля\r\nimport styleClass from './Dialog.module.css'\r\n// Подключение компонентов\r\nimport UserName from \"./UserName/UserName\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogForm from \"./DialogForm/DialogForm\";\r\nimport React from \"react\";\r\nimport {DialogFormValuesType} from \"../../Types/FormsTypes\";\r\nimport {MessageType, NameType} from \"../../Types/Types\";\r\n\r\ntype PropsType = {\r\n    names: Array<NameType>,\r\n    messageArray: Array<MessageType>,\r\n    sendNewMessage: (newMessageText: string) => void\r\n}\r\n\r\nconst Dialog: React.FC<PropsType> =\r\n    (props) => {\r\n\r\n        const AddNewMessage = (formData: DialogFormValuesType) => {\r\n            return props.sendNewMessage(formData.newDialogMessage);\r\n        };\r\n\r\n        return (\r\n            <div className={styleClass.dialogsStyle}>\r\n                <div className={styleClass.userNameStyle}>\r\n                    {/*Полная запись метода map создающего массив компонентов UserName*/}\r\n                    {props.names.map((name) => {\r\n                        return <UserName key={name.id} name={name.name}/>;\r\n                    })}\r\n                </div>\r\n                <div className={styleClass.messagesStyle}>\r\n                    <div>\r\n                        {/*Сокращенная запись метода map создающего массив компонентов Message*/}\r\n                        {props.messageArray.map(message => <Message key={message.id} text={message.text}/>)}\r\n                    </div>\r\n                    <div>\r\n                        <DialogForm onSubmit={AddNewMessage}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default Dialog;","import {GlobalStateType} from \"../store\";\r\n\r\nexport const getNameArray = (state: GlobalStateType) => {\r\n    return state.dialogPage.nameArray;\r\n}\r\n\r\nexport const getMessageArray = (state: GlobalStateType) => {\r\n    return state.dialogPage.messageArray;\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport Dialog from \"./Dialog\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getMessageArray, getNameArray} from \"../../Redux/Selectors/DialogSelectors\";\r\nimport React from \"react\";\r\nimport {ThunkDispatcher} from \"../../Types/Types\";\r\nimport {actions} from \"../../Redux/Reducers/DialogReducer\";\r\n\r\ntype PropsType = {}\r\n\r\nconst DialogContainer: React.FC<PropsType> = (props) => {\r\n    const names = useSelector(getNameArray);\r\n    const messageArray = useSelector(getMessageArray);\r\n\r\n    const dispatch = useDispatch<ThunkDispatcher>();\r\n\r\n    const sendNewMessage = (message: string) => {\r\n        dispatch(actions.sendNewMessage(message))\r\n    }\r\n\r\n    return (\r\n        <Dialog names={names} messageArray={messageArray} sendNewMessage={sendNewMessage}/>\r\n    );\r\n}\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    React.memo\r\n)(DialogContainer);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {GlobalStateType} from \"../Redux/store\";\r\nimport {getIsAuth} from \"../Redux/Selectors/AuthSelectors\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport function withAuthRedirect<T extends object>(WrappedComponent: React.ComponentType<T>) {\r\n\r\n    type MapStateToPropsType = {\r\n        isAuth: boolean\r\n    };\r\n    type MapDispatchToPropsType = {};\r\n    type OwnType = {};\r\n\r\n    type PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnType;\r\n\r\n    // Создаваемый контейнерный компонент\r\n    const RedirectComponent: React.FC<PropsType> =\r\n        React.memo(\r\n            (props) => {\r\n                // Избавляемся от лишнего props isAuth\r\n                let {isAuth, ...restProps} = props;\r\n\r\n                if (!isAuth) {\r\n                    return (<Navigate to='/login'/>);\r\n                }\r\n\r\n                // Передаем в оборачиваемую компоненту\r\n                return <WrappedComponent {...restProps as T}/>;\r\n            }\r\n        );\r\n\r\n    let MapStateToProps = (state: GlobalStateType) => {\r\n        return {\r\n            isAuth: getIsAuth(state)\r\n        };\r\n    };\r\n\r\n\r\n    // Возвращаем созданный\r\n    return connect<MapStateToPropsType, MapDispatchToPropsType, OwnType, GlobalStateType>(\r\n        MapStateToProps,\r\n        {}\r\n    )(RedirectComponent);\r\n}","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n\r\n    return \"Обязательное поле\";\r\n}\r\n\r\nexport const maxLength = (maxLength: number): FieldValidatorType => {\r\n    return (value) => {\r\n        if (value && value.length > maxLength) {\r\n            return `Максимальная длинна ${maxLength} символов`;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}"],"names":["name","type","component","validators","specialAttributes","_jsxs","children","label","_jsx","htmlFor","Field","validate","placeholder","onChange","element","_ref","input","meta","props","_objectWithoutProperties","_excluded","isValidationFailed","touched","error","className","classNames","styleClass","_defineProperty","_objectSpread","text","maxLength15","maxLength","reduxForm","form","Form","onSubmit","handleSubmit","TypedInputField","ValidatedTextarea","requiredField","id","names","map","UserName","messageArray","message","Message","DialogForm","formData","sendNewMessage","newDialogMessage","getNameArray","state","dialogPage","nameArray","getMessageArray","compose","withAuthRedirect","React","useSelector","dispatch","useDispatch","Dialog","actions","WrappedComponent","RedirectComponent","isAuth","restProps","Navigate","to","connect","getIsAuth","value","length","concat"],"sourceRoot":""}