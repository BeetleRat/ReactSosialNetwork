{"version":3,"file":"static/js/504.b03fb7bb.chunk.js","mappings":"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","sources":["webpack://social-network/./src/Components/CommonComponents/ErrorMessage/ErrorMessage.module.css?967a","Components/CommonComponents/ErrorMessage/ErrorMessage.tsx","Components/CommonComponents/FieldCreators/FieldCreators.tsx","Components/CommonComponents/Preloader/Preloader.module.css","Components/CommonComponents/Preloader/Preloader.tsx","webpack://social-network/./src/Components/CommonComponents/ValidatedComponents/ValidatedTexarea/ValidatedTextarea.module.css?5dff","Components/CommonComponents/ValidatedComponents/ValidatedTexarea/ValidatedTextarea.tsx","webpack://social-network/./src/Components/ProfileInfo/Posts/OnePost/OnePost.module.css?37a3","Components/ProfileInfo/Posts/OnePost/OnePost.tsx","Components/ProfileInfo/Posts/PostForm/AddPostForm.tsx","Components/ProfileInfo/Posts/Posts.tsx","webpack://social-network/./src/Components/ProfileInfo/ProfileDescription/ProfileDescription.module.css?5278","Components/ProfileInfo/ProfileDescription/ProfileData/ProfileStatus/ProfileStatus.tsx","Components/ProfileInfo/ProfileDescription/ProfileData/ProfileStatus/ProfileStatusContainer.tsx","webpack://social-network/./src/Components/ProfileInfo/ProfileDescription/ProfileData/Contact/Contact.module.css?509c","Components/ProfileInfo/ProfileDescription/ProfileData/Contact/Contact.tsx","Components/ProfileInfo/ProfileDescription/ProfileData/ProfileData.tsx","Components/ProfileInfo/ProfileDescription/ProfileEditForm/ProfileEditForm.tsx","webpack://social-network/./src/Components/CommonComponents/ValidatedComponents/ValidatedFile/ValidatedFile.module.css?e7d7","Components/CommonComponents/ValidatedComponents/ValidatedFile/ValidatedFile.tsx","Components/ProfileInfo/ProfileDescription/EditPhotoComponent/PhotoEditForm/PhotoEditForm.tsx","Components/ProfileInfo/ProfileDescription/EditPhotoComponent/EditPhotoComponent.tsx","Components/ProfileInfo/ProfileDescription/ProfileDescription.tsx","Components/ProfileInfo/ProfileInfo.tsx","Redux/Selectors/ProfileSelectors.ts","Components/ProfileInfo/ProfileInfoContainer.tsx","Utills/Validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"ErrorMessage_errorMessage__E3reh\",\"formSummaryError\":\"ErrorMessage_formSummaryError__Vh-aa\"};","import styleClass from \"./ErrorMessage.module.css\"\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    error: string\r\n}\r\nconst ErrorMessage: React.FC<PropsType> = ({error}) => {\r\n    return (\r\n        <span>\r\n            {\r\n                // Если есть свойство props.error вывести этот блок\r\n                error &&\r\n                <div className={styleClass.formSummaryError}>\r\n                    <p>{error}</p>\r\n                </div>\r\n            }\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import {Field} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../Utills/Validators/validators\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {StringKey, ValidatorComponentType} from \"../../../Types/Types\";\r\nimport {FieldTypes, InputFieldTypes} from \"../../../Types/FormsTypes\";\r\n\r\nexport type OptionalAttributesType = {\r\n    label?: string,\r\n    placeholder?: string,\r\n    onChange?: (element: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nfunction TypedInputField<T>(\r\n    name: StringKey<T>,\r\n    type: InputFieldTypes,\r\n    component: React.FC<ValidatorComponentType> | FieldTypes,\r\n    validators: Array<FieldValidatorType>,\r\n    specialAttributes?: OptionalAttributesType\r\n): React.ReactElement {\r\n\r\n    const onChangeFunction = (element: ChangeEvent<HTMLInputElement>) => {\r\n        if (specialAttributes?.onChange) {\r\n            specialAttributes?.onChange(element);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {specialAttributes?.label && <label htmlFor={name}>{specialAttributes?.label}</label>}\r\n            <Field name={name} type={type} component={component}\r\n                   validate={validators}\r\n                   placeholder={specialAttributes?.placeholder}\r\n                   onChange={onChangeFunction}/>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default TypedInputField;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"preloaderStyle\":\"Preloader_preloaderStyle__CtlpX\"};","import styleClass from \"./Preloader.module.css\"\r\nimport image from \"../../../Assets/Images/preloder.gif\"\r\nimport React from \"react\";\r\ntype PropsType={\r\n\r\n}\r\nconst Preloader: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={styleClass.preloaderStyle}>\r\n            <img src={image} alt={\"Loading image\"}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"ValidatedTextarea_formControl__pjV-W\",\"error\":\"ValidatedTextarea_error__QfE5k\"};","import styleClass from \"./ValidatedTextarea.module.css\"\r\nimport classNames from \"classnames\"\r\nimport React from \"react\";\r\nimport {ValidatorComponentType} from \"../../../../Types/Types\";\r\n\r\nconst ValidatedTextarea: React.FC<ValidatorComponentType> = ({input, meta, ...props}) => {\r\n    let isValidationFailed = meta.touched && meta.error;\r\n    return (\r\n        <div className={classNames(styleClass.formControl, {[styleClass.error]: isValidationFailed})}>\r\n            <div>\r\n                <textarea  {...input} {...props}/>\r\n            </div>\r\n            {isValidationFailed && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ValidatedTextarea;","// extracted by mini-css-extract-plugin\nexport default {\"postStyle\":\"OnePost_postStyle__JWtXC\"};","import styleClass from \"./OnePost.module.css\"\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    text: string,\r\n    likes: number\r\n}\r\n\r\nconst OnePost: React.FC<PropsType> = ({text, likes}) => {\r\n    return (\r\n        <div className={styleClass.postStyle}>\r\n            <div>\r\n                {text}\r\n            </div>\r\n            <div>\r\n                Лайки: {likes}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default OnePost;","import {Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, requiredField} from \"../../../../Utills/Validators/validators\";\r\nimport ValidatedTextarea from \"../../../CommonComponents/ValidatedComponents/ValidatedTexarea/ValidatedTextarea\";\r\nimport React from \"react\";\r\nimport {PostFormValuesType} from \"../../../../Types/FormsTypes\";\r\nimport TypedInputField from \"../../../CommonComponents/FieldCreators/FieldCreators\";\r\n\r\nlet maxLength15 = maxLength(15);\r\n\r\ntype PropsType = {}\r\nconst AddPostForm: React.FC<InjectedFormProps<PostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            {TypedInputField<PostFormValuesType>(\"newPostText\",\"text\",ValidatedTextarea,[requiredField, maxLength15],{placeholder:\"Текст\"})}\r\n            <div>\r\n                <button id=\"addPostButton\" name=\"addPostButton\">Опубликовать пост</button>\r\n            </div>\r\n        </Form>\r\n    );\r\n\r\n}\r\n\r\nexport default reduxForm<PostFormValuesType, PropsType>({form: 'post'})(AddPostForm)","import styleClass from \"./Posts.module.css\"\r\nimport OnePost from \"./OnePost/OnePost\";\r\nimport AddPostForm from \"./PostForm/AddPostForm\";\r\nimport React from \"react\";\r\nimport {PostType} from \"../../../Types/Types\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>,\r\n    addNewPost: (newPost: string) => void\r\n}\r\n\r\nconst Posts: React.FC<PropsType> = ({addNewPost, posts}) => {\r\n    const AddNewPost = (formData: any) => {\r\n        return addNewPost(formData.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>Посты</h3>\r\n                <AddPostForm onSubmit={AddNewPost}/>\r\n            </div>\r\n            <div>\r\n                {posts.map(post => <OnePost key={post.id} text={post.text} likes={post.likes}/>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Posts;","// extracted by mini-css-extract-plugin\nexport default {\"photoStyle\":\"ProfileDescription_photoStyle__7TzP5\"};","import styleClass from \"./ProfileStatus.module.css\"\r\nimport React, {ChangeEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    editMode: boolean,\r\n    status: string,\r\n    editModeON: () => void,\r\n    editModeOFF: (element: ChangeEvent<HTMLInputElement>) => void,\r\n    changeInputTextStatus: (element: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst ProfileStatus: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            {\r\n                props.editMode // Используем переменную из useState\r\n                    ? <div>\r\n                        <label htmlFor=\"statusInput\"><b>Статус</b>: </label>\r\n                        <input id=\"statusInput\" name=\"statusInput\" type=\"text\"\r\n                               value={props.status} // Используем переменную из useState\r\n                               onChange={props.changeInputTextStatus} onBlur={props.editModeOFF}\r\n                               autoFocus={true}/>\r\n                    </div>\r\n                    : <div>\r\n                        <p onDoubleClick={props.editModeON}>\r\n                            {/*Используем переменную из useState*/}\r\n                            <b>Статус</b>: {props.status ? props.status : \"No status.\"}\r\n                        </p>\r\n                    </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;","import React, {ChangeEvent} from \"react\";\r\nimport {useEffect, useState} from \"react\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\ntype PropsType = {\r\n    authUserID: number,\r\n    status: string,\r\n    updateStatus: (authUserID: number, status: string) => void\r\n}\r\n\r\nconst ProfileStatusContainer: React.FC<PropsType> = (props) => {\r\n    // Локальный state через hook-и\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [status, setStatus] = useState<string>(props.status);\r\n\r\n    // Перерисовка комопоненты в случае изменения props через hook-и\r\n    useEffect(\r\n        () => setStatus(props.status),\r\n        [props.status]\r\n    );\r\n\r\n    const editModeON = () => {\r\n        // Используем setter из useState\r\n        setEditMode(true);\r\n    }\r\n\r\n    const editModeOFF = (element: ChangeEvent<HTMLInputElement>) => {\r\n        // Используем setter из useState\r\n        setEditMode(false);\r\n\r\n        let status = element.target.value;\r\n        props.updateStatus(props.authUserID, status);\r\n    }\r\n\r\n    const changeInputTextStatus = (element: ChangeEvent<HTMLInputElement>) => {\r\n        let status = element.target.value;\r\n        // Используем setter из useState\r\n        setStatus(status);\r\n    }\r\n\r\n    return (\r\n        <ProfileStatus editMode={editMode} status={status}\r\n                       changeInputTextStatus={changeInputTextStatus}\r\n                       editModeOFF={editModeOFF} editModeON={editModeON}/>\r\n    );\r\n}\r\n\r\n\r\nexport default React.memo(ProfileStatusContainer);","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__h4U90\"};","import styleClass from \"./Contact.module.css\"\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<PropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={styleClass.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contact;","import Contact from \"./Contact/Contact\";\r\nimport React from \"react\";\r\nimport {ContactsType, ProfileType, StringKey} from \"../../../../Types/Types\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean,\r\n    profile: ProfileType,\r\n    editModeON: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<PropsType> = ({isOwner, profile, editModeON}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                isOwner &&\r\n                <button onClick={editModeON}>Редактировать</button>\r\n            }\r\n            <p ><b>Страна</b>: {profile.country}</p>\r\n            <p ><b>Город</b>: {profile.city}</p>\r\n            {\r\n                profile.lookingForAJob ? <p><b>Ищу работу</b>: {profile.searchJobDescription}</p> : \"\"\r\n            }\r\n            <div ><b>Контакты</b>:\r\n                {\r\n                    Object.keys(profile.contacts)\r\n                        .filter((key) => profile.contacts[key as keyof ContactsType].length > 0)\r\n                        .map((key) => {\r\n                                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>;\r\n                            }\r\n                        )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileData;","import {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport ErrorMessage from \"../../../CommonComponents/ErrorMessage/ErrorMessage\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {ProfileType} from \"../../../../Types/Types\";\r\nimport {ProfileEditValuesType} from \"../../../../Types/FormsTypes\";\r\nimport TypedInputField from \"../../../CommonComponents/FieldCreators/FieldCreators\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean,\r\n    profile: ProfileType\r\n};\r\n\r\nconst ProfileEditForm: React.FC<InjectedFormProps<ProfileEditValuesType, PropsType> & PropsType> = (props) => {\r\n    let [lookingForAJob, setLookingForAJob] = useState<boolean | undefined>(props.initialValues.lookingForAJob);\r\n\r\n    const updateLookingForAJob = (element: ChangeEvent<HTMLInputElement>) => {\r\n        let lookingForAJobNewState = element.currentTarget.checked;\r\n        setLookingForAJob(lookingForAJobNewState);\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            {\r\n                props.isOwner &&\r\n                <button>Закончить редактирование</button>\r\n            }\r\n            <ErrorMessage error={props.error}/>\r\n            <div>\r\n                <label htmlFor=\"country\"><b>Страна</b>: </label>\r\n                {TypedInputField<ProfileEditValuesType>(\"country\", \"text\", 'input', [])}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"city\"><b>Город</b>: </label>\r\n                {TypedInputField<ProfileEditValuesType>(\"city\", \"text\", 'input', [])}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"lookingForAJobEdit\"><b>Ищу работу</b>: </label>\r\n                <Field id=\"lookingForAJobEdit\" name=\"lookingForAJob\" type=\"checkbox\" component={'input'}\r\n                       onChange={updateLookingForAJob}/>\r\n                {\r\n                    lookingForAJob &&\r\n                    <span>\r\n                    <Field id=\"searchJobDescriptionEdit\" name=\"searchJobDescription\" type=\"text\" component={'input'}/>\r\n                </span>\r\n                }\r\n            </div>\r\n\r\n            <div><b>Контакты</b>:\r\n                {\r\n                    Object.keys(props.profile.contacts)\r\n                        .map(key => {\r\n                                return (\r\n                                    <div id={key}>\r\n                                        <label id={`${key}EditLabel`} htmlFor={`${key}Edit`}><b>{key}</b>: </label>\r\n                                        <Field id={`${key}Edit`} name={`contacts.${key}`} type=\"text\" component={'input'}/>\r\n                                    </div>);\r\n                            }\r\n                        )\r\n                }\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default reduxForm<ProfileEditValuesType, PropsType>({form: 'ProfileForm'})(ProfileEditForm);","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"ValidatedFile_formControl__By-Ux\",\"error\":\"ValidatedFile_error__eMKBh\"};","import styleClass from \"./ValidatedFile.module.css\"\r\nimport classNames from \"classnames\"\r\nimport React from \"react\";\r\nimport {ValidatorComponentType} from \"../../../../Types/Types\";\r\n\r\n\r\nconst ValidatedFile: React.FC<ValidatorComponentType> = ({input: {value: omitValue, ...inputProps}, meta: omitMeta, ...props}) => {\r\n    let isValidationFailed = omitMeta.touched && omitMeta.error;\r\n\r\n    return (\r\n        <div className={classNames(styleClass.formControl, {[styleClass.error]: isValidationFailed})}>\r\n            <div>\r\n                <input type='file' {...inputProps} {...props} />\r\n            </div>\r\n            {isValidationFailed && <span>{omitMeta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ValidatedFile;","import {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {requiredField} from \"../../../../../Utills/Validators/validators\";\r\nimport ValidatedFile from \"../../../../CommonComponents/ValidatedComponents/ValidatedFile/ValidatedFile\";\r\nimport ErrorMessage from \"../../../../CommonComponents/ErrorMessage/ErrorMessage\";\r\nimport React from \"react\";\r\nimport {PhotoEditFromValuesType} from \"../../../../../Types/FormsTypes\";\r\nimport TypedInputField from \"../../../../CommonComponents/FieldCreators/FieldCreators\";\r\n\r\ntype PropsType = {\r\n}\r\nconst PhotoEditForm: React.FC<InjectedFormProps<PhotoEditFromValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            {TypedInputField<PhotoEditFromValuesType>(\"newPhoto\",\"file\",ValidatedFile,[requiredField])}\r\n            <div>\r\n                <button>Загрузить выбранное фото</button>\r\n            </div>\r\n            <ErrorMessage error={props.error}/>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default reduxForm<PhotoEditFromValuesType, PropsType>({form: 'PhotoEditForm'})(PhotoEditForm);","import React, {useState} from \"react\";\r\nimport PhotoEditForm from \"./PhotoEditForm/PhotoEditForm\";\r\nimport {PhotoEditFromValuesType} from \"../../../../Types/FormsTypes\";\r\n\r\ntype PropsType = {\r\n    savePhoto: (authUserID: number, photo: File) => void,\r\n    authUserID: number\r\n}\r\nconst EditPhotoComponent: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const updatePhoto = (formData: PhotoEditFromValuesType) => {\r\n        let photo = formData.newPhoto[0];\r\n        props.savePhoto(props.authUserID, photo);\r\n        setEditMode(false);\r\n            //.then(() => setEditMode(false));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                editMode\r\n                    ? <div>\r\n                        <PhotoEditForm onSubmit={updatePhoto}/>\r\n                        <button onClick={() => setEditMode(false)}>Выйти из редактирования</button>\r\n                    </div>\r\n\r\n                    : <button onClick={() => setEditMode(true)}>Редактировать фото</button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditPhotoComponent;","import styleClass from \"./ProfileDescription.module.css\";\r\nimport defaultAvatar from \"../../../Assets/Images/defaultAvatar.png\";\r\nimport ProfileStatusContainer from \"./ProfileData/ProfileStatus/ProfileStatusContainer\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport ProfileEditForm from \"./ProfileEditForm/ProfileEditForm\";\r\nimport React, {useState} from \"react\";\r\nimport EditPhotoComponent from \"./EditPhotoComponent/EditPhotoComponent\";\r\nimport {ProfileType} from \"../../../Types/Types\";\r\nimport {ProfileEditValuesType} from \"../../../Types/FormsTypes\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean,\r\n    authUserID: number,\r\n    profile: ProfileType,\r\n    updateUserDataFromForm: (profile: ProfileType, formData: ProfileEditValuesType) => void,\r\n    savePhoto: (userID: number, photo: File) => void,\r\n    updateStatus: (userID: number, newStatus: string) => void\r\n}\r\nconst ProfileDescription: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n\r\n    const editModeON = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const editModeOFF = (formData: ProfileEditValuesType) => {\r\n\r\n        props.updateUserDataFromForm(props.profile, formData);\r\n        setEditMode(false);\r\n            // .then(\r\n            //     () => {\r\n            //         setEditMode(false);\r\n            //     }\r\n            // );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.profile.nickname}</h3>\r\n            <img className={styleClass.photoStyle}\r\n                 src={props.profile.imgURL === \"\" ? defaultAvatar : props.profile.imgURL} alt=\"Фото профиля\"/>\r\n            {\r\n                props.isOwner &&\r\n                <EditPhotoComponent savePhoto={props.savePhoto} authUserID={props.authUserID}/>\r\n\r\n            }\r\n            <ProfileStatusContainer status={props.profile.status} updateStatus={props.updateStatus}\r\n                                    authUserID={props.authUserID}/>\r\n            {\r\n                editMode\r\n                    ? <ProfileEditForm isOwner={props.isOwner} profile={props.profile}\r\n                                       initialValues={props.profile} onSubmit={editModeOFF}/>\r\n                    : <ProfileData isOwner={props.isOwner} profile={props.profile} editModeON={editModeON}/>\r\n\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileDescription;","import styleClass from \"./ProfileInfo.module.css\"\r\nimport Posts from \"./Posts/Posts\";\r\nimport Preloader from \"../CommonComponents/Preloader/Preloader\";\r\nimport ProfileDescription from \"./ProfileDescription/ProfileDescription\";\r\nimport React from \"react\";\r\nimport {PostType, ProfileType} from \"../../Types/Types\";\r\nimport {ProfileEditValuesType} from \"../../Types/FormsTypes\";\r\n\r\ntype PropsType = {\r\n    profile?: ProfileType,\r\n    isOwner: boolean,\r\n    authUserID: number,\r\n    posts: Array<PostType>,\r\n    updateUserDataFromForm: (profile: ProfileType, formData: ProfileEditValuesType) => void,\r\n    savePhoto: (userID: number, photo: File) => void,\r\n    updateStatus: (userID: number, newStatus: string) => void\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileDescription profile={props.profile}\r\n                                isOwner={props.isOwner}\r\n                                updateStatus={props.updateStatus}\r\n                                authUserID={props.authUserID}\r\n                                savePhoto={props.savePhoto}\r\n                                updateUserDataFromForm={props.updateUserDataFromForm}/>\r\n\r\n            <Posts posts={props.posts} addNewPost={props.addPost}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import {GlobalStateType} from \"../store\";\r\n\r\nexport const getProfileUser = (state: GlobalStateType) => {\r\n    return state.profilePage.profile;\r\n}\r\n\r\nexport const getProfilePosts = (state: GlobalStateType) => {\r\n    return state.profilePage.postsArray;\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport {\r\n    actions,\r\n    requestProfileFromServer,\r\n    savePhoto,\r\n    updateStatus,\r\n    updateUserDataFromForm\r\n} from \"../../Redux/Reducers/ProfileReducer\";\r\nimport {Navigate, useLocation, useNavigate, useSearchParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {getProfilePosts, getProfileUser} from \"../../Redux/Selectors/ProfileSelectors\";\r\nimport {getAuthUsersID, getIsAuth} from \"../../Redux/Selectors/AuthSelectors\";\r\nimport {ProfileType, ThunkDispatcher} from \"../../Types/Types\";\r\nimport {ProfileEditValuesType} from \"../../Types/FormsTypes\";\r\nimport queryString from \"querystring\";\r\n\r\n\r\ntype QueryParamsType = {\r\n    userID?: string\r\n}\r\n\r\ntype PropsType = {};\r\n\r\n\r\nconst ProfileInfoContainer: React.FC<PropsType> = (props) => {\r\n    // Локальный state\r\n    let [localStateUserID, setUserID] = useState<number>(23);\r\n    let [isOwner, setIsOwner] = useState<boolean>(false);\r\n    let [needRedirect, setNeedRedirect] = useState<boolean>(false);\r\n\r\n    const profile = useSelector(getProfileUser);\r\n    const posts = useSelector(getProfilePosts);\r\n    const authUserID = useSelector(getAuthUsersID);\r\n    const isAuth = useSelector(getIsAuth);\r\n\r\n    const dispatch = useDispatch<ThunkDispatcher>();\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    const location = useLocation();\r\n    useEffect(\r\n        () => refreshProfile(),\r\n        [location.search]\r\n    );\r\n\r\n    const refreshProfile = () => {\r\n        // Берем параметр userID из URL адреса\r\n        // Приводим его к типу number\r\n\r\n        let userIDFromURL: number | null = Number(searchParams.get(\"userID\"));\r\n        let doNeedRedirect = false;\r\n        // Если в URL нет такого параметра(userID==undefined)\r\n        if (!userIDFromURL) {\r\n            if (isAuth && authUserID) {\r\n                userIDFromURL = authUserID;\r\n            } else {\r\n                userIDFromURL = 23;\r\n                doNeedRedirect = true;\r\n            }\r\n        }\r\n\r\n        setUserID(userIDFromURL);\r\n        setIsOwner(userIDFromURL === authUserID);\r\n        setNeedRedirect(doNeedRedirect);\r\n\r\n        if (!doNeedRedirect) {\r\n            dispatch(requestProfileFromServer(userIDFromURL));\r\n        }\r\n    };\r\n\r\n    const addPostRequest = (newPost: string) => {\r\n        dispatch(actions.addPost(newPost))\r\n    }\r\n\r\n    const updateStatusRequest = (userID: number, newStatus: string) => {\r\n        dispatch(updateStatus(userID, newStatus));\r\n    }\r\n    const savePhotoRequest = (userID: number, photo: File) => {\r\n        dispatch(savePhoto(userID, photo));\r\n    }\r\n\r\n    const updateUserDataFromFormRequest = (user: ProfileType, formData: ProfileEditValuesType) => {\r\n        dispatch(updateUserDataFromForm(user, formData))\r\n    }\r\n\r\n\r\n    if (needRedirect\r\n        || profile == null\r\n        || authUserID == null) {\r\n\r\n        return (<Navigate to='/login'/>);\r\n    }\r\n\r\n    return (\r\n        <ProfileInfo profile={profile} posts={posts}\r\n                     isOwner={isOwner}\r\n                     authUserID={authUserID}\r\n                     addPost={addPostRequest}\r\n                     updateStatus={updateStatusRequest}\r\n                     savePhoto={savePhotoRequest}\r\n                     updateUserDataFromForm={updateUserDataFromFormRequest}/>\r\n    )\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    React.memo\r\n)(ProfileInfoContainer);","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n\r\n    return \"Обязательное поле\";\r\n}\r\n\r\nexport const maxLength = (maxLength: number): FieldValidatorType => {\r\n    return (value) => {\r\n        if (value && value.length > maxLength) {\r\n            return `Максимальная длинна ${maxLength} символов`;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}"],"names":["_ref","error","_jsx","children","className","styleClass","name","type","component","validators","specialAttributes","_jsxs","label","htmlFor","Field","validate","placeholder","onChange","element","props","src","image","alt","input","meta","_objectWithoutProperties","_excluded","isValidationFailed","touched","classNames","_defineProperty","_objectSpread","text","likes","maxLength15","maxLength","reduxForm","form","Form","onSubmit","handleSubmit","TypedInputField","ValidatedTextarea","requiredField","id","addNewPost","posts","AddPostForm","formData","newPostText","map","post","OnePost","editMode","value","status","changeInputTextStatus","onBlur","editModeOFF","autoFocus","onDoubleClick","editModeON","ProfileStatusContainer","_useState","useState","_useState2","_slicedToArray","setEditMode","_useState3","_useState4","setStatus","useEffect","ProfileStatus","target","updateStatus","authUserID","React","contactTitle","contactValue","isOwner","profile","onClick","country","city","lookingForAJob","searchJobDescription","Object","keys","contacts","filter","key","length","Contact","initialValues","setLookingForAJob","ErrorMessage","lookingForAJobNewState","currentTarget","checked","concat","_ref$input","inputProps","omitMeta","_excluded2","ValidatedFile","PhotoEditForm","photo","newPhoto","savePhoto","nickname","imgURL","defaultAvatar","EditPhotoComponent","ProfileEditForm","updateUserDataFromForm","ProfileData","ProfileDescription","Posts","addPost","Preloader","getProfileUser","state","profilePage","getProfilePosts","postsArray","compose","setUserID","setIsOwner","_useState5","_useState6","needRedirect","setNeedRedirect","useSelector","getAuthUsersID","isAuth","getIsAuth","dispatch","useDispatch","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","location","useLocation","refreshProfile","search","userIDFromURL","Number","get","doNeedRedirect","requestProfileFromServer","Navigate","to","ProfileInfo","newPost","actions","userID","newStatus","user"],"sourceRoot":""}