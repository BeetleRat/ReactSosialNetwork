{"version":3,"file":"static/js/801.b1f96444.chunk.js","mappings":"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","sources":["Components/CommonComponents/Preloader/Preloader.module.css","Components/CommonComponents/Preloader/Preloader.tsx","webpack://social-network/./src/Components/Users/Users.module.css?d486","webpack://social-network/./src/Components/Users/User/User.module.css?19b8","Components/Users/User/User.tsx","webpack://social-network/./src/Components/CommonComponents/PageNumbers/PageNumbers.module.css?b73e","Components/CommonComponents/PageNumbers/PageRow.tsx","Components/CommonComponents/PageNumbers/PageNumbers.tsx","Components/Users/UsersSearchForm/UsersSearchForm.tsx","Components/Users/Users.tsx","Redux/Selectors/UserSelectors.ts","Redux/Selectors/LoadingSelectors.ts","Components/Users/UsersContainer.tsx","HOC/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"preloaderStyle\":\"Preloader_preloaderStyle__CtlpX\"};","import styleClass from \"./Preloader.module.css\"\r\nimport image from \"../../../Assets/Images/preloder.gif\"\r\nimport React from \"react\";\r\ntype PropsType={\r\n\r\n}\r\nconst Preloader: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={styleClass.preloaderStyle}>\r\n            <img src={image} alt={\"Loading image\"}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nexport default {\"usersStyle\":\"Users_usersStyle__icRf1\",\"userPhotoStyle\":\"Users_userPhotoStyle__hTe8M\"};","// extracted by mini-css-extract-plugin\nexport default {\"userStyle\":\"User_userStyle__AfgQP\",\"userPhotoStyle\":\"User_userPhotoStyle__ibgbp\"};","import styleClass from \"./User.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultAvatar from \"./../../../Assets/Images/defaultAvatar.png\"\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean,\r\n    id: number,\r\n    name: string,\r\n    status: string,\r\n    imgURL: string,\r\n    followed: boolean,\r\n    fetchingUsers: Array<number>,\r\n    followUser: (id: number) => void,\r\n    unfollowUser: (id: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = (props) => {\r\n    const toggleFollowing = (props: PropsType) => {\r\n        if (props.followed) {\r\n            props.unfollowUser(props.id);\r\n        } else {\r\n            props.followUser(props.id);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styleClass.userStyle}>\r\n            <NavLink to={\"/profile?userID=\" + props.id}>\r\n                <img className={styleClass.userPhotoStyle} src={props.imgURL === \"\" ? defaultAvatar : props.imgURL}/>\r\n            </NavLink>\r\n            <div>\r\n                Имя: {props.name}\r\n            </div>\r\n            <div>\r\n                Статус: {props.status}\r\n            </div>\r\n            <div>\r\n                {\r\n                    props.isAuth\r\n                        ? <button onClick={() => toggleFollowing(props)}\r\n                                  disabled={props.fetchingUsers.some(id => id === props.id)}>\r\n                            {props.followed ? \"Unfollow\" : \"Follow\"}\r\n                        </button>\r\n                        : <br/>\r\n                }\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"PageNumbers_page__seKfQ\",\"selectedPage\":\"PageNumbers_selectedPage__iXA3m\"};","import styleClass from \"./PageNumbers.module.css\"\r\nimport classNames from 'classnames'\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    currentPage: number,\r\n    pages: Array<number>,\r\n    changePage: (pageNumber: number) => void\r\n}\r\n\r\nconst PageRow: React.FC<PropsType> = ({currentPage, pages, changePage}) => {\r\n    return (\r\n        <span>\r\n            {\r\n                pages.map((page: number) =>\r\n                    <span key={page}\r\n                          onClick={() => changePage(page)}\r\n                        className={classNames(styleClass.page, {[styleClass.selectedPage]: currentPage === page})}\r\n                    >\r\n                        {page}\r\n                    </span>)\r\n            }\r\n        </span>\r\n\r\n    );\r\n}\r\n\r\nexport default PageRow;","import styleClass from \"./PageNumbers.module.css\"\r\nimport PageRow from \"./PageRow\";\r\nimport Space from \"../Space/Space\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    changePage: (pageNumber: number) => void,\r\n    currentPage: number,\r\n    pageSize: number,\r\n    totalItems: number\r\n}\r\n\r\nconst PageNumbers: React.FC<PropsType> = (props) => {\r\n\r\n    const maxShowedPages = 5;\r\n    const spaceCount = 3;\r\n    const halfShowedPages = Math.floor(maxShowedPages / 2);\r\n    let maxPage = Math.ceil(props.totalItems / props.pageSize);\r\n    let firstPage = 1;\r\n    let pages = [];\r\n\r\n    if (maxPage <= maxShowedPages) {\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            pages.push(i);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <PageRow currentPage={props.currentPage} pages={pages} changePage={props.changePage}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    pages.push(props.currentPage);\r\n    for (let i = 1; i <= halfShowedPages; i++) {\r\n        let positivePush =\r\n            props.currentPage + i > maxPage\r\n                ? props.currentPage - (halfShowedPages) - (i + 1 - maxPage + props.currentPage)\r\n                : props.currentPage + i;\r\n\r\n        let negativePush =\r\n            props.currentPage - i < firstPage\r\n                ? props.currentPage + (halfShowedPages) + (i + firstPage - props.currentPage)\r\n                : props.currentPage - i;\r\n\r\n        if (negativePush > positivePush) {\r\n            if (negativePush > props.currentPage) {\r\n                pages = [...pages, positivePush, negativePush];\r\n            } else {\r\n                pages = [positivePush, negativePush, ...pages];\r\n            }\r\n        } else {\r\n            pages = [negativePush, ...pages, positivePush];\r\n        }\r\n    }\r\n\r\n    if (pages.includes(firstPage)) {\r\n        pages.shift();\r\n\r\n        return (\r\n            <div>\r\n                <PageRow changePage={props.changePage}\r\n                         currentPage={props.currentPage}\r\n                         pages={[firstPage]}/>\r\n                <Space count={spaceCount}/>\r\n                <PageRow changePage={props.changePage}\r\n                         currentPage={props.currentPage}\r\n                         pages={pages}/>\r\n                <span>...</span>\r\n                <PageRow changePage={props.changePage}\r\n                         currentPage={props.currentPage}\r\n                         pages={[maxPage]}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (pages.includes(maxPage)) {\r\n        pages.pop();\r\n\r\n        return (\r\n            <div>\r\n                <PageRow changePage={props.changePage}\r\n                         currentPage={props.currentPage}\r\n                         pages={[firstPage]}/>\r\n                <span>...</span>\r\n                <PageRow changePage={props.changePage}\r\n                         currentPage={props.currentPage}\r\n                         pages={pages}/>\r\n                <Space count={spaceCount}/>\r\n                <PageRow changePage={props.changePage}\r\n                         currentPage={props.currentPage}\r\n                         pages={[maxPage]}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PageRow changePage={props.changePage}\r\n                     currentPage={props.currentPage}\r\n                     pages={[firstPage]}/>\r\n            <span>...</span>\r\n            <PageRow changePage={props.changePage}\r\n                     currentPage={props.currentPage}\r\n                     pages={pages}/>\r\n            <span>...</span>\r\n            <PageRow changePage={props.changePage}\r\n                     currentPage={props.currentPage}\r\n                     pages={[maxPage]}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageNumbers;\r\n","import styleClass from \"./UserSearchForm.module.css\"\r\nimport React from \"react\";\r\nimport {Formik, Form, Field} from \"formik\";\r\n\r\nimport {FilterFormValues} from \"../../../Redux/Reducers/UserReducer\";\r\nimport {BooleanStringType} from \"../../../Types/Types\";\r\n\r\ntype PropsType = {\r\n    filter: FilterFormValues,\r\n    onFilterChanged: (filter: FilterFormValues) => void\r\n}\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: BooleanStringType\r\n}\r\n\r\nconst usersSearchFormValidate = (value: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = (props) => {\r\n    const submit = (values: FormType, {setSubmitting}: {\r\n        setSubmitting: (isSubmitting: boolean) => void\r\n    }) => {\r\n        const FormValue = {\r\n            term: values.term,\r\n            friend: (values.friend == null || values.friend === \"null\") ? null : values.friend === \"true\"\r\n        }\r\n\r\n        props.onFilterChanged(FormValue);\r\n\r\n        setSubmitting(false);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={{term: props.filter.term, friend: String(props.filter.friend) as BooleanStringType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {\r\n                ({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\" placeholder=\"Friends only\">\r\n                            <option value=\"null\">Все</option>\r\n                            <option value=\"true\">Только друзья</option>\r\n                            <option value=\"false\">Кроме друзей</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default UsersSearchForm;","import styleClass from \"./Users.module.css\"\r\nimport User from \"./User/User\";\r\nimport PageNumbers from \"../CommonComponents/PageNumbers/PageNumbers\";\r\nimport {UserType} from \"../../Types/Types\";\r\nimport React from \"react\";\r\nimport UsersSearchForm from \"./UsersSearchForm/UsersSearchForm\";\r\nimport {FilterFormValues} from \"../../Redux/Reducers/UserReducer\";\r\n\r\n\r\ntype PropsType = {\r\n    filter:FilterFormValues,\r\n    users: Array<UserType>,\r\n    isAuth: boolean,\r\n    currentUserID: number | null,\r\n    totalUsers: number,\r\n    currentPage: number,\r\n    pageSize: number,\r\n    fetchingUsers: Array<number>,\r\n    changePage: (newPage: number) => void,\r\n    followUser: (currentUserID: number | null, id: number) => void,\r\n    unfollowUser: (currentUserID: number | null, id: number) => void,\r\n    onFilterChanged: (filter: FilterFormValues) => void\r\n}\r\n\r\nconst Users: React.FC<PropsType> = (props) => {\r\n    const followUser = (id: number) => {\r\n        return props.followUser(props.currentUserID, id);\r\n    }\r\n\r\n    const unfollowUser = (id: number) => {\r\n        return props.unfollowUser(props.currentUserID, id);\r\n    }\r\n\r\n    return (\r\n        <div className={styleClass.usersStyle}>\r\n            <UsersSearchForm filter={props.filter} onFilterChanged={props.onFilterChanged}/>\r\n            <hr/>\r\n            <PageNumbers totalItems={props.totalUsers} pageSize={props.pageSize}\r\n                         currentPage={props.currentPage} changePage={props.changePage}/>\r\n            <hr/>\r\n\r\n            {\r\n                props.users.map(user =>\r\n                    <User key={user.id} id={user.id} name={user.name} fetchingUsers={props.fetchingUsers}\r\n                          followed={user.followed}\r\n                          status={user.status} imgURL={user.imgURL} isAuth={props.isAuth}\r\n                          followUser={followUser} unfollowUser={unfollowUser}/>\r\n                )\r\n            }\r\n\r\n            <PageNumbers totalItems={props.totalUsers} pageSize={props.pageSize}\r\n                         currentPage={props.currentPage} changePage={props.changePage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","import {GlobalStateType} from \"../store\";\r\n\r\nexport const getUsers = (state: GlobalStateType) => {\r\n    return state.userPage.users;\r\n}\r\n\r\nexport const getPageSize = (state: GlobalStateType) => {\r\n    return state.userPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: GlobalStateType) => {\r\n    return state.userPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: GlobalStateType) => {\r\n    return state.userPage.currentPage;\r\n}\r\n\r\nexport const getFilter = (state: GlobalStateType) => {\r\n    return state.userPage.filter;\r\n}\r\n\r\nexport const getFetchingUsers = (state: GlobalStateType) => {\r\n    return state.userPage.fetchingUsers;\r\n}\r\n\r\n","import {GlobalStateType} from \"../store\";\r\n\r\nexport const getIsLoading = (state: GlobalStateType) => {\r\n    return state.userPage.isLoading;\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    actions,\r\n    FilterFormValues,\r\n    followUser,\r\n    requestUsersFromServer,\r\n    unfollowUser\r\n} from \"../../Redux/Reducers/UserReducer\";\r\nimport React, {useEffect} from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../CommonComponents/Preloader/Preloader\";\r\nimport {\r\n    getCurrentPage,\r\n    getFetchingUsers,\r\n    getFilter,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../Redux/Selectors/UserSelectors\";\r\nimport {getIsLoading} from \"../../Redux/Selectors/LoadingSelectors\";\r\nimport {getAuthUsersID, getIsAuth} from \"../../Redux/Selectors/AuthSelectors\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {BooleanStringType, ThunkDispatcher} from \"../../Types/Types\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {};\r\ntype URLParamsType = {\r\n    page?: string,\r\n    term?: string,\r\n    friend?: string\r\n}\r\n\r\nconst UsersContainer: React.FC<PropsType> = (props) => {\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const users = useSelector(getUsers);\r\n    const fetchingUsers = useSelector(getFetchingUsers);\r\n    const pageSize = useSelector(getPageSize);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const filter = useSelector(getFilter);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const currentUserID = useSelector(getAuthUsersID);\r\n\r\n    const dispatch = useDispatch<ThunkDispatcher>();\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            const actualPage = searchParams.get(\"page\") == null ? currentPage : Number(searchParams.get(\"page\"));\r\n            const actualTerm = searchParams.get(\"term\") == null ? filter.term : searchParams.get(\"term\") as string;\r\n            const actualFriend = searchParams.get(\"friend\") == null ? filter.friend : (searchParams.get(\"friend\") === 'true');\r\n\r\n            getUsersFromServer(actualPage - 1, {term: actualTerm, friend: actualFriend})\r\n        },\r\n        []\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            const urlParams: URLParamsType = {};\r\n\r\n            if (filter.term !== \"\") {\r\n                urlParams.term = filter.term;\r\n            }\r\n            if (filter.friend !== null) {\r\n                urlParams.friend = String(filter.friend) as BooleanStringType\r\n            }\r\n            if (currentPage !== 1) {\r\n                urlParams.page = String(currentPage);\r\n            }\r\n\r\n            setSearchParams(urlParams);\r\n        },\r\n        [filter, currentPage]);\r\n\r\n    const getUsersFromServer = (page: number, filter: FilterFormValues) => {\r\n        dispatch(requestUsersFromServer(page, pageSize, filter));\r\n    };\r\n\r\n    const changePage = (currentPage: number) => {\r\n        dispatch(actions.setCurrentPage(currentPage));\r\n        getUsersFromServer(currentPage - 1, filter);\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterFormValues) => {\r\n        dispatch(actions.setFilter(filter));\r\n        getUsersFromServer(0, filter);\r\n    }\r\n\r\n    const followUserRequest = (currentUserID: number | null, userID: number) => {\r\n        dispatch(followUser(currentUserID, userID));\r\n    }\r\n\r\n    const unfollowUserRequest = (currentUserID: number | null, userID: number) => {\r\n        dispatch(unfollowUser(currentUserID, userID));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                // Отобразить Preloader, если нужно\r\n                isLoading && <Preloader/>\r\n            }\r\n            <Users filter={filter} users={users}\r\n                   fetchingUsers={fetchingUsers} totalUsers={totalUsersCount}\r\n                   pageSize={pageSize} currentPage={currentPage}\r\n                   isAuth={isAuth} currentUserID={currentUserID}\r\n                   changePage={changePage}\r\n                   followUser={followUserRequest} unfollowUser={unfollowUserRequest}\r\n                   onFilterChanged={onFilterChanged}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    React.memo\r\n)(UsersContainer);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {GlobalStateType} from \"../Redux/store\";\r\nimport {getIsAuth} from \"../Redux/Selectors/AuthSelectors\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport function withAuthRedirect<T extends object>(WrappedComponent: React.ComponentType<T>) {\r\n\r\n    type MapStateToPropsType = {\r\n        isAuth: boolean\r\n    };\r\n    type MapDispatchToPropsType = {};\r\n    type OwnType = {};\r\n\r\n    type PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnType;\r\n\r\n    // Создаваемый контейнерный компонент\r\n    const RedirectComponent: React.FC<PropsType> =\r\n        React.memo(\r\n            (props) => {\r\n                // Избавляемся от лишнего props isAuth\r\n                let {isAuth, ...restProps} = props;\r\n\r\n                if (!isAuth) {\r\n                    return (<Navigate to='/login'/>);\r\n                }\r\n\r\n                // Передаем в оборачиваемую компоненту\r\n                return <WrappedComponent {...restProps as T}/>;\r\n            }\r\n        );\r\n\r\n    let MapStateToProps = (state: GlobalStateType) => {\r\n        return {\r\n            isAuth: getIsAuth(state)\r\n        };\r\n    };\r\n\r\n\r\n    // Возвращаем созданный\r\n    return connect<MapStateToPropsType, MapDispatchToPropsType, OwnType, GlobalStateType>(\r\n        MapStateToProps,\r\n        {}\r\n    )(RedirectComponent);\r\n}"],"names":["props","_jsx","className","styleClass","children","src","image","alt","_jsxs","NavLink","to","id","imgURL","defaultAvatar","name","status","isAuth","onClick","followed","unfollowUser","followUser","toggleFollowing","disabled","fetchingUsers","some","_ref","currentPage","pages","changePage","map","page","classNames","_defineProperty","halfShowedPages","Math","floor","maxShowedPages","maxPage","ceil","totalItems","pageSize","i","push","PageRow","positivePush","negativePush","concat","_toConsumableArray","includes","shift","Space","count","pop","usersSearchFormValidate","value","Formik","enableReinitialize","initialValues","term","filter","friend","String","validate","onSubmit","values","setSubmitting","FormValue","onFilterChanged","_ref2","isSubmitting","Form","Field","type","as","placeholder","currentUserID","UsersSearchForm","PageNumbers","totalUsers","users","user","User","getUsers","state","userPage","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getFilter","getFetchingUsers","getIsLoading","isLoading","compose","withAuthRedirect","React","useSelector","getIsAuth","getAuthUsersID","dispatch","useDispatch","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","useEffect","actualPage","get","Number","actualTerm","actualFriend","getUsersFromServer","urlParams","requestUsersFromServer","Preloader","Users","actions","setCurrentPage","userID","setFilter","WrappedComponent","RedirectComponent","restProps","_objectWithoutProperties","_excluded","_objectSpread","Navigate","connect"],"sourceRoot":""}