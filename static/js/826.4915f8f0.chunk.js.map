{"version":3,"file":"static/js/826.4915f8f0.chunk.js","mappings":"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","sources":["HOC/WithAuthRedirect.tsx","Pages/Chat/ChatMessages/OneChatMessage/OneChatMessage.tsx","Pages/Chat/ChatMessages/ChatMessages.tsx","Pages/Chat/AddMessageForm/AddMessageForm.tsx","Pages/Chat/Chat.tsx","Pages/Chat/ChatPage.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {GlobalStateType} from \"../Redux/store\";\r\nimport {getIsAuth} from \"../Redux/Selectors/AuthSelectors\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport function withAuthRedirect<T extends object>(WrappedComponent: React.ComponentType<T>) {\r\n\r\n    type MapStateToPropsType = {\r\n        isAuth: boolean\r\n    };\r\n    type MapDispatchToPropsType = {};\r\n    type OwnType = {};\r\n\r\n    type PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnType;\r\n\r\n    // Создаваемый контейнерный компонент\r\n    const RedirectComponent: React.FC<PropsType> =\r\n        React.memo(\r\n            (props) => {\r\n                // Избавляемся от лишнего props isAuth\r\n                let {isAuth, ...restProps} = props;\r\n\r\n                if (!isAuth) {\r\n                    return (<Navigate to='/login'/>);\r\n                }\r\n\r\n                // Передаем в оборачиваемую компоненту\r\n                return <WrappedComponent {...restProps as T}/>;\r\n            }\r\n        );\r\n\r\n    let MapStateToProps = (state: GlobalStateType) => {\r\n        return {\r\n            isAuth: getIsAuth(state)\r\n        };\r\n    };\r\n\r\n\r\n    // Возвращаем созданный\r\n    return connect<MapStateToPropsType, MapDispatchToPropsType, OwnType, GlobalStateType>(\r\n        MapStateToProps,\r\n        {}\r\n    )(RedirectComponent);\r\n}","import styleClass from \"./OneChatMessage.module.css\";\r\nimport React from \"react\";\r\nimport AvatarComponent from \"../../../../Components/CommonComponents/AvatarComponent/AvatarComponent\";\r\n\r\ntype PropsType = {\r\n    username: string,\r\n    userAvatarImageURL: string | null,\r\n    message: string\r\n}\r\n\r\nconst OneChatMessage: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div style={{height: \"70px\"}}>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <td align=\"center\">\r\n                        <AvatarComponent imgURL={props.userAvatarImageURL}/>\r\n                    </td>\r\n                    <td width=\"80%\">\r\n                        {props.message}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td align=\"center\">\r\n                        <b>{props.username}</b>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OneChatMessage;","import React from \"react\";\r\nimport OneChatMessage from \"./OneChatMessage/OneChatMessage\";\r\nimport {ChatMessageType} from \"../ChatPage\";\r\n\r\ntype PropsType = {\r\n    messageArray: ChatMessageType[]\r\n}\r\nconst ChatMessages: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div style={{height: \"200px\", overflowY: \"auto\"}}>\r\n            {props.messageArray.map((message, key) =>\r\n                <div key={key}>\r\n                    <OneChatMessage username={message.userName}\r\n                                    userAvatarImageURL={message.imgURL}\r\n                                    message={message.message}/>\r\n\r\n                </div>\r\n            )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatMessages;","import React, {useState} from \"react\";\r\nimport {Button} from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\n\r\ntype PropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\nconst AddMessageForm: React.FC<PropsType> = ({sendMessage}) => {\r\n    const [currentMessage, setCurrentMessage] = useState<string>(\"\");\r\n    const changeCurrentMessage = (element: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setCurrentMessage(element.currentTarget.value);\r\n    }\r\n\r\n    const sendMessageFromLocalState = () => {\r\n        sendMessage(currentMessage);\r\n        setCurrentMessage(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextArea onChange={changeCurrentMessage}></TextArea>\r\n            </div>\r\n            <div>\r\n                <Button onClick={sendMessageFromLocalState}>Отправить сообщение</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddMessageForm;","import React from \"react\";\r\nimport ChatMessages from \"./ChatMessages/ChatMessages\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport {ChatMessageType} from \"./ChatPage\";\r\n\r\ntype PropsType = {\r\n    messageArray: ChatMessageType[],\r\n    sendMessage: (message: string) => void\r\n}\r\nconst Chat: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ChatMessages messageArray={props.messageArray}/>\r\n            <hr/>\r\n            <AddMessageForm sendMessage={props.sendMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","import React, {useEffect, useState} from \"react\";\r\nimport Chat from \"./Chat\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {SERVER_ADDRESS} from \"../../ServerAPI/serverInteractionAPI\";\r\n\r\n\r\ndebugger;\r\nconst webSocketChannel = new WebSocket('ws://localhost:8080/ws');\r\ntype PropsType = {}\r\nexport type ChatMessageType = {\r\n    userID: number,\r\n    userName: string,\r\n    imgURL: string | null,\r\n    message: string\r\n}\r\nconst ChatPage: React.FC<PropsType> = (props) => {\r\n\r\n    const [messageArray, setMessageArray] = useState<ChatMessageType[]>([]);\r\n\r\n    useEffect(\r\n        () => {\r\n            webSocketChannel.addEventListener(\r\n                'message',\r\n                (response) => {\r\n                    let newMessages = JSON.parse(response.data);\r\n                    console.log(newMessages);\r\n                    setMessageArray(\r\n                        (prevMessages) => [...prevMessages, ...newMessages]\r\n                    );\r\n                }\r\n            );\r\n        },\r\n        []\r\n    );\r\n\r\n    const sendMessage = (message: string) => {\r\n        debugger;\r\n        webSocketChannel.send(message);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Chat messageArray={messageArray} sendMessage={sendMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    React.memo\r\n)(ChatPage);"],"names":["withAuthRedirect","WrappedComponent","RedirectComponent","React","props","isAuth","restProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","Navigate","to","connect","state","getIsAuth","style","height","children","_jsxs","align","AvatarComponent","imgURL","userAvatarImageURL","width","message","username","overflowY","messageArray","map","key","OneChatMessage","userName","_ref","sendMessage","_useState","useState","_useState2","_slicedToArray","currentMessage","setCurrentMessage","TextArea","onChange","element","currentTarget","value","Button","onClick","ChatMessages","AddMessageForm","webSocketChannel","WebSocket","compose","setMessageArray","useEffect","addEventListener","response","newMessages","JSON","parse","data","console","log","prevMessages","concat","_toConsumableArray","Chat","send"],"sourceRoot":""}