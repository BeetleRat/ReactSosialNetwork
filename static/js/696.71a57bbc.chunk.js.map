{"version":3,"file":"static/js/696.71a57bbc.chunk.js","mappings":"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","sources":["Components/CommonComponents/Preloader/Preloader.module.css","Components/CommonComponents/Preloader/Preloader.js","Redux/Selectors/UserSelectors.js","Redux/Selectors/LoadingSelectors.js","Components/Users/UsersContainer.js","HOC/WithAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"preloaderStyle\":\"Preloader_preloaderStyle__CtlpX\"};","import styleClass from \"./Preloader.module.css\"\r\nimport image from \"../../../assets/images/preloder.gif\"\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <div className={styleClass.preloaderStyle}>\r\n            <img src={image}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import {createSelector} from \"reselect\";\r\n\r\nexport const getUsers = (state) => {\r\n    return state.userPage.users;\r\n}\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.userPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.userPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.userPage.currentPage;\r\n}\r\n\r\n\r\n\r\nexport const getFetchingUsers = (state) => {\r\n    return state.userPage.fetchingUsers;\r\n}\r\n\r\n","export const getIsLoading = (state) => {\r\n    return state.userPage.isLoading;\r\n}","import {connect} from \"react-redux\";\r\nimport {\r\n    followUser, requestUsersFromServer,\r\n    setCurrentPage,\r\n    toggleFetchingUser,\r\n    unfollowUser\r\n} from \"../../Redux/Redusers/UserReducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../CommonComponents/Preloader/Preloader\";\r\nimport {\r\n\r\n    getCurrentPage, getFetchingUsers,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../Redux/Selectors/UserSelectors\";\r\nimport {getIsLoading} from \"../../Redux/Selectors/LoadingSelectors\";\r\nimport {getIsAuth, getAuthUsersID} from \"../../Redux/Selectors/AuthSelectors\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\n// Классовая компонента, отвечающая за взаимодействие с REST сервисом_______________________\r\nclass UsersContainer extends React.Component {\r\n\r\n    // Метод жизненного цикла\r\n    // вызываемый при вставке классового компонента в общую разметку\r\n    // данный метод выполняется 1 раз.\r\n    componentDidMount() {\r\n        // Вызов метода взаимодействия с сервером\r\n        this.GetUsersFromServer(this.props.currentPage - 1);\r\n    }\r\n\r\n    // Метод взаимодействия с сервером\r\n    // Получить список пользователей со страницы page\r\n    GetUsersFromServer(page) {\r\n        this.props.getUsersFromServer(page, this.props.pageSize);\r\n    };\r\n\r\n    // Метод нажания на \"кнопку\" страницы\r\n    // Если метод вызываетя внутри разметки,\r\n    // то он должен описываться через стрелочную функцию\r\n    changePage = (newPage) => {\r\n        this.props.setCurrentPage(newPage);\r\n        this.GetUsersFromServer(newPage - 1);\r\n    }\r\n\r\n    // Перегрузка метода суперкласса\r\n    // метод возвращающий JSX разметку\r\n    // Поскольку данная компонента тоже является контейнерной,\r\n    // то в данном методе возвращается презентационная компонента\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    // Отобразить Preloader, если нужно\r\n                    this.props.isLoading ? <Preloader/> : \"\"\r\n                }\r\n                <Users users={this.props.users} fetchingUsers={this.props.fetchingUsers}\r\n                       totalUsers={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize} currentPage={this.props.currentPage}\r\n                       isAuth={this.props.isAuth} currentUserID={this.props.currentUserID}\r\n                       changePage={this.changePage}\r\n                       followUser={this.props.followUser} unfollowUser={this.props.unfollowUser}\r\n                       toggleFetchingUser={this.props.toggleFetchingUser}/>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n// Конец классовой компоненты___________________________________________________________\r\n\r\nconst MapStateToProps = (state) => {\r\n    return {\r\n\r\n        users: getUsers(state),\r\n        fetchingUsers: getFetchingUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isLoading: getIsLoading(state),\r\n        isAuth: getIsAuth(state),\r\n        currentUserID: getAuthUsersID(state)\r\n    };\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(\r\n        MapStateToProps,\r\n        {\r\n            followUser,\r\n            unfollowUser,\r\n            setCurrentPage,\r\n            toggleFetchingUser,\r\n            getUsersFromServer: requestUsersFromServer\r\n        }\r\n    )\r\n)(UsersContainer);","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    // Создаваемый контейнерный компонент\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth){\r\n                return (<Redirect to='/login'/>);\r\n            }\r\n            return <Component {...this.props}/>;\r\n        }\r\n    }\r\n\r\n    let MapStateToProps = (state) => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n\r\n\r\n    // Возвращаем созданный\r\n    return connect(MapStateToProps, {})(RedirectComponent);;\r\n}"],"names":["props","_jsx","className","styleClass","children","src","image","getUsers","state","userPage","users","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getFetchingUsers","fetchingUsers","getIsLoading","isLoading","UsersContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","changePage","newPage","setCurrentPage","GetUsersFromServer","_createClass","key","value","this","page","getUsersFromServer","_jsxs","Preloader","Users","totalUsers","isAuth","currentUserID","followUser","unfollowUser","toggleFetchingUser","React","compose","withAuthRedirect","connect","getIsAuth","getAuthUsersID","requestUsersFromServer","Component","RedirectComponent","_objectSpread","Redirect","to","auth"],"sourceRoot":""}